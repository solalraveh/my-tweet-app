# Sample Azure DevOps pipeline
# Showcasing integration of twistcli scanning

# This sample relies on environment variables for connectivity to Twistlock

# TL_USER:  The Twistlock user with the CI User role
# TL_PASS:  The password for this user account
# TL_CONSOLE_URL:  The base URL for the console -- http://console.<my_company>.com:8083 -- without a trailing /

# First, build our image
# Use a Linux-based agent such as Ubuntu 16.04

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  imageName: 'my_tweet_app:$(build.buildId)'

steps:
- script: docker build -f Dockerfile -t $(imageName) .
  displayName: 'docker build'
  
# Use a script step to pull twistcli and scan the image that was built

#- task: UniversalPackages@0
#  inputs:
#    command: 'download'
#    downloadDirectory: '$(System.DefaultWorkingDirectory)'
#    feedsToUse: 'internal'
#    vstsFeed: '582b9380-2959-4311-8506-d40a6a9016b2/818b27f2-2a03-4e97-aca0-1f33c48ea12a'
#    vstsFeedPackage: '14f85eea-fd74-45f6-9bfd-7427cb7e77e3'
#    vstsPackageVersion: '20.4.169'


#- task: CmdLine@2
#  displayName: 'Make twstcli executable'
#  inputs:
#    script: 'sudo mv $(System.DefaultWorkingDirectory)/twistcli /usr/bin/twistcli &&
#      sudo chmod +x /usr/bin/twistcli'


#- task: CmdLine@2
#  displayName: 'Image Vulnerability and Compliance Scan'
#  inputs:
#    script: '/usr/bin/twistcli images scan --address $(TL_CONSOLE_URL) --user $(TL_USER) --password $(TL_PASS) --details my_tweet_app:$(build.buildId)'


#- script: docker tag $(imageName) securethecloud/my_tweet_app:$(build.buildId)
#  displayName: 'docker tag'

#- script: docker login -u $(DOCKERHUB_USER) -p $(DOCKERHUB_PASSWORD)
#  displayName: 'docker login to DockerHub'

#- script: docker push securethecloud/my_tweet_app:$(build.buildId)
#  displayName: 'docker push to DockerHub'
  
#- task: CmdLine@2
#  displayName: 'Infrasturcture as Code Scan - Kubernetes deployment file'
#  inputs:
#    script: '/usr/bin/twistcli iac scan deployment/my_tweet_app_k8s.yml --address $(PC_CONSOLE_URL) --user $(IAC_USER) --password $(IAC_PASS)'
  
# Testing....

#- task: CmdLine@2
#  inputs:
#    script: '/usr/bin/twistcli images scan --address $(TL_CONSOLE_URL) --user $(TL_USER) --password $(TL_PASS) --details --ci my_tweet_app:$(build.buildId)'

#- task: CmdLine@2
#  inputs:
#    script: '/usr/bin/twistcli images scan --address $(TL_CONSOLE_URL) --user $(TL_USER) --password $(TL_PASS) --details --ci my_tweet_app:$(build.buildId) | tee -a output && grep "Compliance threshold check results: PASS" output && grep "Vulnerability threshold check results: PASS" output'

- task: Prisma Cloud IaC Scan@1
  inputs:
    Path: 'deployment/'
    prismaCloudService: 'Test Connection'
    High: '0'
    Medium: '0'
    Low: '0'
    Operator: 'or'